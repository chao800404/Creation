generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String    @default("/static/png/default.png")
  createdAt     DateTime  @default(now())
  accounts      Account[]
  page          Page[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Cover {
  id        String   @id @default(cuid())
  image     String   @default("")
  layoutY   Int?
  pageId    String   @unique @map("page_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("cover")
}

model Emoji {
  id        String   @id @default(cuid())
  image     String   @default("")
  pageId    String   @unique @map("page_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@map("emoji")
}

model EmojiBaseMap {
  id        String   @id @default(cuid())
  name      String?
  image     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("emojiBaseMap")
}

model Page {
  id           String   @id @default(cuid())
  title        String?
  favorite     Boolean  @default(false)
  userId       String   @map("user_id")
  editable     Boolean  @default(true)
  blockToOrder Json?
  parentId     String?
  parent       Page?    @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id])
  cover        Cover?
  emoji        Emoji?
  children     Page[]   @relation("ParentChildren")
  blockHTML         BlockHTML[]


  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@unique([id, userId])
  @@map("page")
}




model BlockHTML {
  id        String   @id @default(cuid())
  name      String   @default("paragraph")
  type      String   @default("text")
  content   String   @default("")
  pageId    String   @map("page_id")
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())


  @@unique([pageId, id])
  @@index([id , name])
  @@map("block_HTML")
}



