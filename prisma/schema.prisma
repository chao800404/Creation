
generator client {
   provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String    @default("/static/png/default.png")
  accounts      Account[]
  sessions      Session[]
  list          List[]


  createdAt     DateTime  @default(now())

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}



model Cover {
  id           String       @id @default(cuid())
  image        String       @default("")
  layoutY      Int?          
  list         List         @relation(fields: [listId], references: [id],onDelete: Cascade) 
  listId       String       @unique 
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  @@map("cover")
}

model Emoji {
  id           String       @id @default(cuid())
  image        String       @default("")
  list         List         @relation(fields: [listId], references: id , onDelete: Cascade) 
  listId       String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  @@map("emoji")
}

model EmojiBaseMap {
  id           String       @id @default(cuid())
  name         String?
  image        String       @default("")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  @@map("emojiBaseMap")
}

model List  {
  id           String       @id @default(cuid())
  title        String?       
  favorite     Boolean      @default(false)
  user         User         @relation(fields: [authorId], references: [id])
  authorId     String            
  editable     Boolean      @default(true)   
  cover        Cover?
  emoji        Emoji?

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  @@map("list")
}